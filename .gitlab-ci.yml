# Define the stages for the CI/CD pipeline
stages:
  - build

# Define the build job
build_image:
  # Specify the stage in which the job should run
  image: docker:latest # Use the latest version of Docker as the base image for this job
  stage: build
  services:
    - docker:dind  # Enable Docker-in-Docker service for building and pushing Docker images
  # Set up tasks to be executed before each job
  before_script:
    # Log in to the GitLab Container Registry using CI/CD environment variables -- these are set up automatically
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  # Specify the tasks to be executed in the job
  script:
    - unset DOCKER_HOST
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    # Build the Docker image with the specified name and tag
    - docker build --pull -t "$CI_REGISTRY_IMAGE${tag}" .
    - docker push "$CI_REGISTRY_IMAGE${tag}"

  # Define rules to trigger the job only when specific files change
  rules:
    - if: $CI_COMMIT_BRANCH
    - changes:
        - Dockerfile
        - requirements.txt
        - run.py
